#!/bin/bash

# Copyright (C) 2013 SpidaWeb LLC, http://www.spidasoftware.com
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A bash script to test the format script
# Nicholas Joodi

echo "Before you run this test, make sure you are in a git repository, and that you have no modified files."
echo "Otherwise, This may cause undesirable changes to your modified files. Also, this testing script"
echo "requires that the java and groovy formatter are installed to the formatter. If you decide to removed the java"
echo "or groovy formatter, or change the preferences, many of these tests could fail. Do you wish to continue?"
echo "(enter y to continue)"
read answer
if [[ ${answer} != y ]] ; then
	exit 1
fi
echo ""
echo "**********************************************************"
echo "*                Begin Running Tests                     *"
echo "**********************************************************"
echo ""
# the first 15 tests format files that are already formatted, so no backup should be created. The next 20 tests format files that require formatting,
# so those tests that have the backup option set, should then create a backup

# format one file with no backup. Since no formatting was needed on these files, no backup should be created regardless
echo "Test format <formatBashScriptTest162846folder/file.groovy> (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "" > "formatBashScriptTest162846folder/file.groovy"
testName[0]="Test format <formatBashScriptTest162846folder/file.groovy> (Formatting done on files already formatted, so no backup needed)"
if [[ $(format formatBashScriptTest162846folder/file.groovy) = "*** Groovy standard formatting conventions have been applied to "* ]]  ; then
	echo " - Format on one groovy file: PASSED"
	testPassed[0]="1"
else
	echo " - Format on one groovy file: FAILED"
	testPassed[0]="0"
fi
testName[1]="Test format <formatBashScriptTest162846folder/file.groovy> (Formatting done on files already formatted, so no backup needed),  no Backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${#numfiles[@]} = *1 ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[1]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[1]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""
# format one file with backup option. Since no formatting was needed on these files, no backup should be created regardless

echo "Test format -b <formatBashScriptTest162846folder/file.groovy> (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "" > "formatBashScriptTest162846folder/file.groovy"
testName[2]="Test format -b <formatBashScriptTest162846folder/file.groovy> (Formatting done on files already formatted, so no backup needed)"
if [[ $(format -b formatBashScriptTest162846folder/file.groovy) == *"*** Groovy standard formatting conventions have been applied to "* ]]  ; then
	echo " - Format on one groovy file: PASSED"
	testPassed[2]="1"
else
	echo " - Format on one groovy file: FAILED"
	testPassed[2]="0"
fi
testName[3]="Test format -b <formatBashScriptTest162846folder/file.groovy> (Formatting done on files already formatted, so no backup needed), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *1 ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[3]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[3]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format one groovy script without backup. Since no formatting was needed on these files, no backup should be created regardless

echo "Test format <formatBashScriptTest162846folder/file> (groovy script) (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file"
testName[4]="Test format <formatBashScriptTest162846folder/file> (groovy script) (Formatting done on files already formatted, so no backup needed)"
if [[ $(format formatBashScriptTest162846folder/file) = "*** Groovy standard formatting conventions have been applied to"* ]]  ; then
	echo " - Format on one groovy script: PASSED"
	testPassed[4]="1"
else
	echo " - Format on one groovy script: FAILED"
	testPassed[4]="0"
fi
testName[5]="Test format <formatBashScriptTest162846folder/file> (groovy script) (Formatting done on files already formatted, so no backup needed), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *1 ]] ; then
		echo " - No backup file created: PASSED"
		testPassed[5]="1"
	else
		echo " - No backup file created: FAILED"
		testPassed[5]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format one groovy script with the backup option. Since no formatting was needed on these files, no backup should be created regardless

echo "Test format -b <formatBashScriptTest162846folder/file> (groovy script) (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file"
testName[6]="Test format -b <formatBashScriptTest162846folder/file> (groovy script) (Formatting done on files already formatted, so no backup needed)"
if [[ $(format -b formatBashScriptTest162846folder/file) == *"*** Groovy standard formatting conventions have been applied to "* ]]  ; then
	echo " - Format on one groovy script: PASSED"
	testPassed[6]="1"
else
	echo " - Format on one groovy script: FAILED"
	testPassed[6]="0"
fi
testName[7]="Test format -b <formatBashScriptTest162846folder/file> (groovy script) (Formatting done on files already formatted, so no backup needed), no backup "
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *1 ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[7]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[7]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format a directory of files with no backup (groovy script). Since no formatting was needed on these files, no backup should be created regardless

echo "Test format <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/file2.java"
echo "" > "formatBashScriptTest162846folder/file3.groovy"
echo "" > "formatBashScriptTest162846folder/file4.groovy"
outputJava="*** Java standard formatting conventions have been applied to "
outputGroovy="*** Groovy standard formatting conventions have been applied to "
testName[8]="Test format <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"

if [[ $(format formatBashScriptTest162846folder) == "${outputGroovy}"*"${outputJava}"*"${outputGroovy}"*"${outputGroovy}"* ]]  ; then
	echo " - Format on one formatBashScriptTest162846folder: PASSED"
	testPassed[8]="1"
else
	echo " - Format on one formatBashScriptTest162846folder: FAILED"
	testPassed[8]="0"
fi
testName[9]="Test format <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *4 ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[9]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[9]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format a directory of files with the  backup option (should format groovy scripts). Since no formatting was needed on these files, no backup should be created regardless

echo "Test format -b <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/file2.java"
echo "" > "formatBashScriptTest162846folder/file3.groovy"
echo "" > "formatBashScriptTest162846folder/file4.groovy"
outputJava="*** Java standard formatting conventions have been applied to "
outputGroovy="*** Groovy standard formatting conventions have been applied to "
testName[10]="Test format -b <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
if [[ $(format -b formatBashScriptTest162846folder) == *"${outputGroovy}"*"${outputJava}"*"${outputGroovy}"*"${outputGroovy}"* ]]  ; then
	echo " - Format on one formatBashScriptTest162846folder: PASSED"
	testPassed[10]="1"
else
	echo " - Format on one groovy script: FAILED"
	testPassed[10]="0"
fi
testName[11]="Test format -b <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed), backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *4 ]] ; then
		echo " - No Backup files created: PASSED"
		testPassed[11]="1"
	else
		echo " - No Backup files created: FAILED"
		testPassed[11]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format recursively a directory of files with no backup (should format groovy scripts) . Since no formatting was needed on these files, no backup should be created regardless

echo "Test format -r <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/file2.java"
echo "" > "formatBashScriptTest162846folder/file3.groovy"
echo "" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[12]="Test format -r <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
if [[ $(printf "y\n" | format -r formatBashScriptTest162846folder) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
	echo " - Format recursively: PASSED"
	testPassed[12]="1"
else
	echo " - Format recursively: FAILED"
	testPassed[12]="0"
fi
testName[13]="Test format -r <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *5*5*4* ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[13]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[13]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format recursively a directory of files with the backup option set (should format groovy scripts). Since no formatting was needed on these files, no backup should be created regardless

echo "Test format -r -b <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/file2.java"
echo "" > "formatBashScriptTest162846folder/file3.groovy"
echo "" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[14]="Test format -r -b <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed)"
if [[ $(printf "y\n" | format -r -b formatBashScriptTest162846folder) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
	echo " - Format recursively: PASSED"
	testPassed[14]="1"
else
	echo " - Format recursively: FAILED"
	testPassed[14]="0"
fi
testName[15]="Test format -r -b <formatBashScriptTest162846folder> (groovy script) (Formatting done on files already formatted, so no backup needed), backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *5*5*4* ]] ; then
		echo " - No Backup files created: PASSED"
		testPassed[15]="1"
	else
		echo " - No Backup files created: FAILED"
		testPassed[15]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""
# format a git repo with no backup (should format groovy scripts). Since no formatting was needed on these files, no backup should be created regardless

echo "Test -g format <formatBashScriptTest162846folder> (groovy script)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/file2.java"
echo "" > "formatBashScriptTest162846folder/file3.groovy"
echo "" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {
}
"> "formatBashScriptTest162846folder/inner/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
git add .
echo " " >> "formatBashScriptTest162846folder/file1"
echo " " >> "formatBashScriptTest162846folder/file2.java"
echo " " >> "formatBashScriptTest162846folder/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/file4.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/file1"
echo " " >> "formatBashScriptTest162846folder/inner/file2.java"
echo " " >> "formatBashScriptTest162846folder/inner/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/file4.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file1"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file2.java"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[16]="Test format -g (groovy script) (Formatting done on files already formatted, so no backup needed)"
 if [[ $(format -g ) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
 	echo " - Format git repo: PASSED"
 	testPassed[16]="1"
 else
	echo " - Format git repo: FAILED"
	testPassed[16]="0"
 fi
 testName[17]="Test format -g (groovy script) (Formatting done on files already formatted, so no backup needed), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *5*5*4* ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[17]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[17]="0"
	fi
	rm -r formatBashScriptTest162846folder
	git reset HEAD formatBashScriptTest162846folder/*

fi
echo ""

# format a git repo with the backup option set (should format groovy scripts). Formatting needed on the files.

echo "Test -g -b format <formatBashScriptTest162846folder> (groovy script). Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/file2.java"
echo "" > "formatBashScriptTest162846folder/file3.groovy"
echo "" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {
}
" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
git add .
echo " " >> "formatBashScriptTest162846folder/file1"
echo " " >> "formatBashScriptTest162846folder/file2.java"
echo " " >> "formatBashScriptTest162846folder/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/file4.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/file1"
echo " " >> "formatBashScriptTest162846folder/inner/file2.java"
echo " " >> "formatBashScriptTest162846folder/inner/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/file4.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file1"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file2.java"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[18]="Test format -g -b (groovy script)"
if [[ $(format -g -b ) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
	echo " - Format git repo: PASSED"
	testPassed[18]="1"
else
	echo " - Format git repo: FAILED"
	testPassed[18]="0"
fi
testName[19]="Test format -g -b (groovy script), Backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *9*9*8*  ]] ; then
		echo " - Backup files created: PASSED"
		testPassed[19]="1"
	else
		echo " - Backup files created: FAILED"
		testPassed[19]="0"
	fi
	rm -r formatBashScriptTest162846folder
	git reset HEAD formatBashScriptTest162846folder/*

fi
echo ""

# format one file with no backup. Formatting needed on the files.
echo "Test format <formatBashScriptTest162846folder/file.groovy>. Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "public class word{}" > "formatBashScriptTest162846folder/file.groovy"
testName[20]="Test format <formatBashScriptTest162846folder/file.groovy>"
if [[ $(format formatBashScriptTest162846folder/file.groovy) = "*** Groovy standard formatting conventions have been applied to "* ]]  ; then
	echo " - Format on one groovy file: PASSED"
	testPassed[20]="1"
else
	echo " - Format on one groovy file: FAILED"
	testPassed[20]="0"
fi
testName[21]="Test format <formatBashScriptTest162846folder/file.groovy>,  no Backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${#numfiles[@]} = *1 ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[21]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[21]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""
# format one file with the backup option set. Formatting needed on the files.

echo "Test format -b <formatBashScriptTest162846folder/file.groovy>. Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "public class word{}" > "formatBashScriptTest162846folder/file.groovy"
testName[22]="Test format -b <formatBashScriptTest162846folder/file.groovy>"
if [[ $(format -b formatBashScriptTest162846folder/file.groovy) == *"*** Groovy standard formatting conventions have been applied to "* ]]  ; then
	echo " - Format on one groovy file: PASSED"
	testPassed[22]="1"
else
	echo " - Format on one groovy file: FAILED"
	testPassed[22]="0"
fi
testName[23]="Test format -b <formatBashScriptTest162846folder/file.groovy>, backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *2 ]] ; then
		echo " - Backup file created: PASSED"
		testPassed[23]="1"
	else
		echo " - Backup file created: FAILED"
		testPassed[23]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format one groovy script without backup. Formatting needed on the files.
echo "Test format <formatBashScriptTest162846folder/file> (groovy script)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy" > "formatBashScriptTest162846folder/file"
testName[24]="Test format <formatBashScriptTest162846folder/file> (groovy script)"
if [[ $(format formatBashScriptTest162846folder/file) = "*** Groovy standard formatting conventions have been applied to"* ]]  ; then
	echo " - Format on one groovy script: PASSED"
	testPassed[24]="1"
else
	echo " - Format on one groovy script: FAILED"
	testPassed[24]="0"
fi
testName[5]="Test format <formatBashScriptTest162846folder/file> (groovy script), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *1 ]] ; then
		echo " - No backup file created: PASSED"
		testPassed[25]="1"
	else
		echo " - No backup file created: FAILED"
		testPassed[25]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format one groovy script with backup option set. Formatting needed on the files. 
echo "Test format -b <formatBashScriptTest162846folder/file> (groovy script). Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file"
testName[26]="Test format -b <formatBashScriptTest162846folder/file> (groovy script)"
if [[ $(format -b formatBashScriptTest162846folder/file) == *"*** Groovy standard formatting conventions have been applied to "* ]]  ; then
	echo " - Format on one groovy script: PASSED"
	testPassed[26]="1"
else
	echo " - Format on one groovy script: FAILED"
	testPassed[26]="0"
fi
testName[27]="Test format -b <formatBashScriptTest162846folder/file> (groovy script), no backup "
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *2 ]] ; then
		echo " - Backup file created: PASSED"
		testPassed[27]="1"
	else
		echo " - Backup file created: FAILED"
		testPassed[27]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format a directory of files with no backup option set (should format groovy scripts). Formatting needed on the files.

echo "Test format <formatBashScriptTest162846folder> (groovy script). Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file4.groovy"
outputJava="*** Java standard formatting conventions have been applied to "
outputGroovy="*** Groovy standard formatting conventions have been applied to "
testName[28]="Test format <formatBashScriptTest162846folder> (groovy script)"

if [[ $(format formatBashScriptTest162846folder) == "${outputGroovy}"*"${outputJava}"*"${outputGroovy}"*"${outputGroovy}"* ]]  ; then
	echo " - Format on one formatBashScriptTest162846folder: PASSED"
	testPassed[28]="1"
else
	echo " - Format on one formatBashScriptTest162846folder: FAILED"
	testPassed[28]="0"
fi
testName[29]="Test format <formatBashScriptTest162846folder> (groovy script), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *4 ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[29]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[29]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format a directory of files with the  backup option set (should format groovy scripts). Formatting needed on the files.

echo "Test format -b <formatBashScriptTest162846folder> (groovy script). Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file4.groovy"
outputJava="*** Java standard formatting conventions have been applied to "
outputGroovy="*** Groovy standard formatting conventions have been applied to "
testName[30]="Test format -b <formatBashScriptTest162846folder> (groovy script) "
if [[ $(format -b formatBashScriptTest162846folder) == *"${outputGroovy}"*"${outputJava}"*"${outputGroovy}"*"${outputGroovy}"* ]]  ; then
	echo " - Format on one formatBashScriptTest162846folder: PASSED"
	testPassed[30]="1"
else
	echo " - Format on one groovy script: FAILED"
	testPassed[30]="0"
fi
testName[31]="Test format -b <formatBashScriptTest162846folder> (groovy script), backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfiles=$(ls -1 formatBashScriptTest162846folder | wc -l)
	if [[ ${numfiles} = *8 ]] ; then
		echo " - Backup files created: PASSED"
		testPassed[31]="1"
	else
		echo " - Backup files created: FAILED"
		testPassed[31]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format recursively a directory of files with no backup option set (should format groovy scripts). Formatting needed on the files.

echo "Test format -r <formatBashScriptTest162846folder> (groovy script). Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/inner/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy
public class file2 {} " > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[32]="Test format -r <formatBashScriptTest162846folder> (groovy script)"
if [[ $(printf "y\n" | format -r formatBashScriptTest162846folder) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
	echo " - Format recursively: PASSED"
	testPassed[32]="1"
else
	echo " - Format recursively: FAILED"
	testPassed[32]="0"
fi
testName[33]="Test format -r <formatBashScriptTest162846folder> (groovy script, no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *5*5*4* ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[33]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[33]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format recursively a directory of files with a backup option set (should format groovy scripts). Formatting needed on the files.

echo "Test format -r -b <formatBashScriptTest162846folder> (groovy script)"
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/inner/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy
public class file2 {} " > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[33]="Test format -r -b <formatBashScriptTest162846folder> (groovy script)"
if [[ $(printf "y\n" | format -r -b formatBashScriptTest162846folder) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
	echo " - Format recursively: PASSED"
	testPassed[33]="1"
else
	echo " - Format recursively: FAILED"
	testPassed[33]="0"
fi
testName[34]="Test format -r <formatBashScriptTest162846folder> (groovy script, backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *9*9*8* ]] ; then
		echo " - Backup file created: PASSED"
		testPassed[34]="1"
	else
		echo " - Backup file created: FAILED"
		testPassed[34]="0"
	fi
	rm -r formatBashScriptTest162846folder
fi
echo ""

# format a git repo with no backup option set (should format groovy scripts). Formatting needed on the files.

echo "Test format -g <formatBashScriptTest162846folder> (groovy script). Formatting needed on the files."
mkdir "formatBashScriptTest162846folder"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner"
echo "#!/usr/bin/env groovy
public class file2 {} "> "formatBashScriptTest162846folder/inner/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/inner/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/file4.groovy"
mkdir "formatBashScriptTest162846folder/inner/inside"
echo "#!/usr/bin/env groovy
public class file2 {} " > "formatBashScriptTest162846folder/inner/inside/file1"
echo "public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest162846folder/inner/inside/file4.groovy"
git add .
echo " " >> "formatBashScriptTest162846folder/file1"
echo " " >> "formatBashScriptTest162846folder/file2.java"
echo " " >> "formatBashScriptTest162846folder/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/file4.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/file1"
echo " " >> "formatBashScriptTest162846folder/inner/file2.java"
echo " " >> "formatBashScriptTest162846folder/inner/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/file4.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file1"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file2.java"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file3.groovy"
echo " " >> "formatBashScriptTest162846folder/inner/inside/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
testName[35]="Test format -g (groovy script)"
 if [[ $(format -g ) == *"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"*"${oG}"*"${oJ}"*"${oG}"*"${oG}"* ]]  ; then
 	echo " - Format git repo: PASSED"
 	testPassed[35]="1"
 else
	echo " - Format git repo: FAILED"
	testPassed[35]="0"
 fi
 testName[36]="Test format -g (groovy script), no backup"
if [ -d formatBashScriptTest162846folder ]; then
	numfilesformatBashScriptTest162846folder=$(ls -1 formatBashScriptTest162846folder | wc -l)
	numfilesInner=$(ls -1 formatBashScriptTest162846folder/inner | wc -l)
	numfilesInside=$(ls -1 formatBashScriptTest162846folder/inner/inside | wc -l)
	if [[ "${numfilesformatBashScriptTest162846folder}${numfilesInner}${numfilesInside}"  = *5*5*4* ]] ; then
		echo " - No Backup file created: PASSED"
		testPassed[36]="1"
	else
		echo " - No Backup file created: FAILED"
		testPassed[36]="0"
	fi
	rm -r formatBashScriptTest162846folder
	git reset HEAD formatBashScriptTest162846folder/*

fi
echo ""

# Glob testing

echo "Test format *.java <formatBashScriptTest9992folder>. Formatting not needed on the files."
mkdir "formatBashScriptTest9992folder"
echo "public class file1 {}" > "formatBashScriptTest9992folder/file1.java"
echo "public class file2 {}" > "formatBashScriptTest9992folder/file2.java"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest9992folder/file3.groovy"
echo "#!/usr/bin/env groovy
public class file2 {}" > "formatBashScriptTest9992folder/file4.groovy"
oJ="*** Java standard formatting conventions have been applied to "
oG="*** Groovy standard formatting conventions have been applied to "
cd formatBashScriptTest9992folder/
testName[37]="Test format *.java"
RESULTS=$( format *.java )
if [[ "${RESULTS}" == *"${oJ}"*"${oJ}"* ]] && [[ ! RESULTS == *"${oG}"* ]] ; then
	echo " - Format *.java: PASSED"
	testPassed[37]="1"
else
	echo " - Format *.java: FAILED"
	testPassed[37]="0"
fi
echo ""
echo "Test format *.groovy <formatBashScriptTest9992folder>. Formatting not needed on the files."
testName[38]="Test format *.groovy"
RESULTS=$( format *.groovy )
if [[ "${RESULTS}" == *"${oG}"*"${oG}"* ]] && [[ ! RESULTS == *"${oJ}"* ]] ; then
	echo " - Format *.groovy: PASSED"
	testPassed[38]="1"
else
	echo " - Format *.groovy: FAILED"
	testPassed[38]="0"
fi
echo ""
echo "Test format *.* <formatBashScriptTest9992folder>. Formatting not needed on the files."
testName[39]="Test format *.*"
RESULTS=$( format *.* )
if [[ "${RESULTS}" == *"${oJ}"*"${oJ}"*"${oG}"*"${oG}"* ]] ; then
	echo " - Format *.*: PASSED"
	testPassed[39]="1"
else
	echo " - Format *.*: FAILED"
	testPassed[39]="0"
fi
echo ""
echo "Test format . <formatBashScriptTest9992folder>. Formatting not needed on the files."
testName[40]="Test format ."
RESULTS=$( format . )
if [[ "${RESULTS}" == *"${oJ}"*"${oJ}"*"${oG}"*"${oG}"* ]] ; then
	echo " - Format .: PASSED"
	testPassed[40]="1"
else
	echo " - Format .: FAILED"
	testPassed[40]="0"
fi
echo ""
echo "Test format [list] <formatBashScriptTest9992folder>. Formatting not needed on the files."
testName[41]="Test format [list]"
RESULTS=$( format file1.java file3.groovy )
if [[ "${RESULTS}" == *"${oJ}"*"${oG}"* ]] && [[ ! RESULTS == *"${oJ}"*"${oJ}"*"${oG}"*"${oG}"* ]] ; then
	echo " - Format [list]: PASSED"
	testPassed[41]="1"
else
	echo " - Format [list]: FAILED"
	testPassed[41]="0"
fi
echo ""
echo "Test format [list with fail] <formatBashScriptTest9992folder>. Formatting not needed on the files."
testName[42]="Test format [list with fail]"
RESULTS=$( format file1.java file4.java file3.groovy )
oError="Usage: format [options] <file(s) or director(y/ies) with relative path>
    -h:       print this message
    -b:       create a backup file
    -r:       format all files recursively starting from the directory specified
    -g:       format all modified files in the git working directory
              (r and g can not be set together)
              (g does not need a filename as an argument)"
if [[ "${RESULTS}" == *"${oJ}"*"${oError}"*"${oG}"* ]] ; then
	echo " - Format [list with fail]: PASSED"
	testPassed[42]="1"
else
	echo " - Format [list with fail]: FAILED"
	testPassed[42]="0"
fi
cd ..
rm -r formatBashScriptTest9992folder

len=${#testPassed[@]} 
numFailed=0
for (( i=0; i<${len}; i++ )); do
	if  [[ ${testPassed[i]} = "0"  ]] ; then
		((numFailed++))
	fi
done
if [[ ${numFailed}>0 ]] ; then
	echo "*********************************"
	echo "           TESTS FAILED"
	echo "*********************************"
	len=${#testPassed[@]} 
	echo ""
	echo "Tests that failed:"
	for (( i=0; i<${len}; i++ )); do
		if  [[ ${testPassed[i]} = "0"  ]] ; then
			echo "   - ${testName[i]}"
		fi
	done
else
	echo "*********************************"
	echo "           TESTS PASSED"
	echo "*********************************"
fi
